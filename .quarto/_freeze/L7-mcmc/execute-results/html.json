{
  "hash": "7166da4c242a7fbff75953e6860f1bff",
  "result": {
    "engine": "knitr",
    "markdown": "\\newpage\n\n# Lecture 7: Monte Carlo Markov Chains\n\n## Monte Carlo Markov Chains (MCMC)\n\n### Intro\n\nFrom the previous section, we saw that for the two models we proposed, we are able to find conjugate prior distributions. When paired with the likelihood, these resulted in a posterior distribution that is not only in closed form but also in the same family as the prior, and amenable to some pencil-and-paper analysis. For example marginal distributions and marginal moments are easy to compute. Even in this case, we saw that generating a Monte Carlo sample from the posterior can be a useful shortcut for exploring variability in nonlinear transformation of the parameters such as the PPV or the log odds ratio.\n\nIn more complex situations, for example when we are dealing with prior knowledge on a parameter that may result in non-conjugate priors, or when dealing with a hierarchical set-up, little progress can be made analytically. We often have the numerator of the posterior in closed form, but cannot evaluate analytically the denominator. In such cases, we can still rely on computational solutions to obtain approximately representative samples of the posterior distribution. With these samples, one can then obtain posterior summaries such as marginal densities, or probabilities of events defined in terms of several parameters, that otherwise would be difficult or impossible.\n\n\\newpage\n\n### Gibbs and Metropolis Sampling\n\nTo motivate, we note that the expectation of any function $f$ of a random variable $\\theta$ with distribution $p(\\theta)$ can be estimated arbitrarily accurately by:\n\n\n```{=tex}\n\\begin{itemize}\n\\item Generating a sample $\\theta^1, \\ldots \\theta^M$\n\\item Evaluating $$ E ( f(\\theta) ) \\approx \\frac 1M \\sum_1^M f(\\theta^m)$$\n\\end{itemize}\n```\n\nIn \\textbf{Gibbs Sampling}, a Monte Carlo sample from the joint distribution $p (\\theta_1,\\theta_2)$ can be obtained by iteratively sampling $p(\\theta_1 | \\theta_2)$ and $p(\\theta_2 | \\theta_1)$, where these are known distributions, called \"full conditional\" distributions.\n\nThis is especially useful when the full conditionals are easy to sample from, but works in general, because full conditionals tend to be far more amenable to decent approximations that their multivariate counterparts.\n\nWhen the full conditionals are not easily tractable, a useful alternative is the Metropolis sampling algorithm.\n\n\n```{=tex}\n\\begin{itemize}\n\\item Start with a symmetric transition kernel $q(\\theta^m, \\theta^{m+1})$.\n\\item Given a current state $\\theta^m$ this is used to generate a candidate next state $\\theta^*$.\n\\item Then either the transition is accepted and $\\theta^{m+1} = \\theta^*$ or it is not when $\\theta^{m+1} = \\theta^{m}$. The probability that the move is accepted is $min \\left\\{ 1, \\frac {p(\\theta^*)}{ p(\\theta^{m})} \\right\\}$.\n\\end{itemize}\n```\n\nMost Bayesian texts, including \"Modeling in Medical Decision Making\" on Canvas have chapters on MCMC. A nice monograph is [\\@Gamerman2006](https://www.pdfdrive.com/markov-chain-monte-carlo-stochastic-simulation-for-bayesian-inference-e168647228.html).\n\nI find [Chi Feng's Animations](http://chi-feng.github.io/mcmc-demo/) extremely effective to getan intuition for these samplers!\n\n\\newpage\n\n## A simple parametric model for ZNF487\n\n### Data\n\nWe now introduce coding for MCMC's. This week's section has more example and coding details.\n\nConsider again the debulking variable with optimal as $1$ for the `ZNF487` gene. We first look at the dot plots in both the log scale and the original intensity scale (obtined by exponentiating the value in the database).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nplot(XX,YY,xlab=c(\"Log Expression of\",GeneName),cex=2)\nplot(exp(XX),YY,xlab=c(\"Expression of\",GeneName),cex=2)\n```\n\n::: {.cell-output-display}\n![Plots for ZNF487](L7-mcmc_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\\newpage\n\n### Likelihood and Prior\n\nTo illustrate, we model the two class conditional distributions of expression using gamma densities. The model specification is in this code chunk, which we will feed to JAGS via rJAGS below. JAGS is persnickety about paramter inputs. Check section 9.2 of the [JAGS manual](https://people.stat.sc.edu/hansont/stat740/jags_user_manual.pdf).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGamModel =\"model {\n    # Likelihood:\n    for( i in 1 : n0 ) { x0[i] ~ dgamma(ss0,rr0) } \n    for( j in 1 : n1 ) { x1[j] ~ dgamma(ss1,rr1) }\n    # Prior:\n    ss0 ~ dnorm( 0, 1.0E-3)T(0,)\n    rr0 ~ dnorm( 0, 1.0E-3)T(0,)\n    ss1 ~ dnorm( 0, 1.0E-3)T(0,) \n    rr1 ~ dnorm( 0, 1.0E-3)T(0,) \n}\n\"\n```\n:::\n\n\nss0, rr0, ss1 and rr1 are unknown shape and rate parameters. They are by definition positive. The priors for all these are \"half normal\" obtained by centering a normal at 0 and restricting is to have positive values. JAGS expect the normal scale to be specified as \"precision\", formally defined as the reciprocal of the variance. A small precision will give you a flat half normal, but one that will eventially die out. You can set the precision so that the range of the prior stretches across all a priori plausible values, and only rule out values that are clearly implausible. Let's take a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(abs(rnorm(1600,0,sd=sqrt(1/.001))),main=\"\",xlab=\"parameter (rr or ss)\",nclass=50)\n```\n\n::: {.cell-output-display}\n![Illustration of the Effect of Precision on Half Normal Prior](L7-mcmc_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\\newpage\n\n### rJAGS\n\nWe use `RJags` to run this. We first import the three packages we wish to utilize for `RJags` to work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(coda)\nlibrary(rjags)\nlibrary(R2jags)\n```\n:::\n\n\nWe run four short chains, to illustrate the initial aches and pains of convergence, then run 4 longer chains with 10000 iterations, the first 1000 of which (\"burn-in\") are discarded via n.adapt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGamModelJ = jags.model(textConnection(GamModel),\n                   data = list( x0 = exp(XX[YY==0]), \n                                n0 = sum(YY==0), \n                                x1 = exp(XX[YY==1]), \n                                n1 = sum(YY==1)),\n                   n.chains = 4,\n                   n.adapt = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 40\n   Unobserved stochastic nodes: 4\n   Total graph size: 48\n\nInitializing model\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in jags.model(textConnection(GamModel), data = list(x0 = exp(XX[YY == :\nAdaptation incomplete\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(117)\nmcmc.out.short = coda.samples(GamModelJ,c(\"rr0\",\"rr1\",\"ss0\",\"ss1\"),n.iter = 90,thin=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNOTE: Stopping adaptation\n```\n\n\n:::\n\n```{.r .cell-code}\nGamModelJ = jags.model(textConnection(GamModel),\n                   data = list( x0 = exp(XX[YY==0]), \n                                n0 = sum(YY==0), \n                                x1 = exp(XX[YY==1]), \n                                n1 = sum(YY==1)),\n                   n.chains = 4,\n                   n.adapt = 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 40\n   Unobserved stochastic nodes: 4\n   Total graph size: 48\n\nInitializing model\n```\n\n\n:::\n\n```{.r .cell-code}\nmcmc.out = coda.samples(GamModelJ,c(\"rr0\",\"rr1\",\"ss0\",\"ss1\"),n.iter = 9000,thin=100)\n```\n:::\n\n\n\\newpage\n\n### Trace Plots\n\nIt is useful to look at trace plot of samples from the posterior. Multiple independent chains allow us to gauge convergence (more formal approaches are discussed in Section). We look for stable and overlapping traces. Chains in group 0 are closer and more stable than in group 1. In Group 1, between iterations 50 and 70 both parameters take a detour upwards, illustrating the correlation, and how correlated runs can visit region of relatively low probability for too long.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncex <- 0.7\npar(cex.lab=cex, cex.axis=cex, cex.main=0.85)\npar(mgp=c(1.5, 0.4, 0))\npar(oma=c(0,0,0,0))\npar(mar=rep(1.2, 4))\nplot(mcmc.out.short,smooth=F,auto.layout=T)\n```\n\n::: {.cell-output-display}\n![MCMC Plots](L7-mcmc_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\\newpage\n\nThe same diagnostic on the longer chain, after removing the burn-in, looks fine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncex <- 0.7\npar(cex.lab=cex, cex.axis=cex, cex.main=0.85)\npar(mgp=c(1.5, 0.4, 0))\npar(oma=c(0,0,0,0))\npar(mar=rep(1.2, 4))\nplot(mcmc.out,smooth=F,auto.layout=T)\n```\n\n::: {.cell-output-display}\n![MCMC Trace](L7-mcmc_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNote how the final marginal densities do not differ much from those of the first 90 iterations. So why go for the longer chain? When chains show questionable convergence, there is a bigger change that some entirely unexplored region of high posterior may exist. Converged chains don't rule that out (we could have hit the same local mode four times!) but make it less likely. Also, other features like tail probaiblities or probabilities of rare events require better convergence and bigger sample sizes.\n\n\\newpage\n\n### Posterior Summaries of Class Conditional Densities and Their Functions\n\nWe next extract the the MCMC chain for each parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrr0 = as.vector(mcmc.out[[1]][,\"rr0\"]) # rate in dgamma R function\nrr1 = as.vector(mcmc.out[[1]][,\"rr1\"])\nss0 = as.vector(mcmc.out[[1]][,\"ss0\"]) # shape in dgamma R function (not to be confused with scale)\nss1 = as.vector(mcmc.out[[1]][,\"ss1\"])\n```\n:::\n\n\nEach value of the chain gives us a model-based estimate of the class-conditional distributions. A straightforward summary is to average these densities point-wise over a grid.\n\n\\newpage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx = seq(0,1,.01)\nMM = length(rr0)\nff0 = ff1 = matrix(NA,length(xx),MM)\nfor (mm in 1:MM) {\n  ff0[,mm] = dgamma(xx,ss0[mm],rr0[mm])\n  ff1[,mm] = dgamma(xx,ss1[mm],rr1[mm])\n}\nff0.postmean = apply(ff0,1,mean)\nff1.postmean = apply(ff1,1,mean)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(xx,ff0.postmean,xlab=\"Expression\",ylab=\"Conditional Density\",type=\"l\",lwd=2); lines(xx,ff1.postmean,lwd=2,col=3); abline(0,0); rug(XXe[YY==0],lwd=2); rug(XXe[YY==1],col=3,lwd=2)\n```\n\n::: {.cell-output-display}\n![Conditional Density Plot](L7-mcmc_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe can use these directly to visualize the log likelihood ratio and PPV. A better estimator can be constructed by calculating the log likelihood ration pointwise and averaging the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nllr.postmean = apply( log(ff1/ff0), 1, mean )\nplot(xx,llr.postmean,xlab=\"Expression\",ylab=\"Log Likelihood Ratio\",type=\"l\",lwd=2); abline(0,0)\n```\n\n::: {.cell-output-display}\n![Log Likelihood Ratio](L7-mcmc_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npi = .1\nppv.postmean = apply ( 1 / ( 1 + ((1-pi)/pi) * (ff0/ff1) ), 1, mean)\nplot(log(xx), ppv.postmean, xlab=\"Log Expression\",ylab=\"Probability of Optimal Debulking\",type=\"l\",ylim=c(0,1))\n```\n\n::: {.cell-output-display}\n![Positive Predictive Value](L7-mcmc_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Posterior Uncertianty in Benefit Curves\n\nImportantly, we can also analyze the variability. We focus here on visualizing variability of the benefit curve. We evaluate the benefit curve at each draw of the parameter values, and graph a small subset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbenefit.uncertain = function(pp,\n                             minX = 0,\n                             maxX = 1.2,\n                   rrr0=rr0,\n                   rrr1=rr1,\n                   sss0=ss0,\n                   sss1=ss1,\n                   u00 = 3, \n                   u11 = 20, \n                   u10 = 2, \n                   u01 = 15,\n                   nn = 10\n                   ){\n  subs.chain = sample(1:length(rrr0),nn)\n                   rrr0=rr0[subs.chain]\n                   rrr1=rr1[subs.chain]\n                   sss0=ss0[subs.chain]\n                   sss1=ss1[subs.chain]\nuD2yes = pp*u11 + (1-pp)*u10\nuD2no = pp*u01 + (1-pp)*u00\nuNoMarker = max(uD2yes,uD2no)\ntau = seq(minX,maxX,by= ( maxX-minX )/100 )\nF0 = F1 = matrix(NA,length(tau),length(rrr0))\nfor (jj in 1:length(tau)){\n  F1[jj,] = pgamma(tau[jj],sss1,rrr1)\n  F0[jj,] = pgamma(tau[jj],sss0,rrr0)\n  }\nuMarker = pp * (1-F1) * u11 + (1-pp) * (1-F0)* u10 + pp * F1 * u01 +  (1-pp) * F0 * u00\nbenefitMarker = uMarker - uNoMarker\nreturn(list(tau=tau,benefitMarker=benefitMarker,\n            uD2yes=uD2yes,uD2no=uD2no))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(314)\nBU = benefit.uncertain(1/6)\nplot(log(BU$tau),BU$benefitMarker[,1],\n     type=\"l\",lwd=2,ylim=c(-1,.75),\n     ylab=\"Benefit of Biomarker\",xlab=\"tau\")\nfor(ll in 1:ncol(BU$benefitMarker)) lines(log(BU$tau),BU$benefitMarker[,ll])\nabline(0,0)\n```\n\n::: {.cell-output-display}\n![Benefit of Biomarker against tau, with uncertainty. Prevalence .2](L7-mcmc_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\\newpage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBU = benefit.uncertain(.25)\nplot(log(BU$tau),BU$benefitMarker[,1],\n     type=\"l\",lwd=2,ylim=c(-1,.5),\n     ylab=\"Benefit of Biomarker\",xlab=\"tau\")\nfor(ll in 2:ncol(BU$benefitMarker)) lines(log(BU$tau),BU$benefitMarker[,ll])\nabline(0,0)\n```\n\n::: {.cell-output-display}\n![Benefit of Biomarker against tau, with uncertainty. Prevalence .4](L7-mcmc_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\\newpage\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}